/* tslint:disable */
/* eslint-disable */
/**
 * BookMeAPI | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookingDto,
  CancelBookingDto,
  ConfirmBookingDto,
  CreateTimeSlotsDto,
  GetTimeSlotsDto,
  PagedListDtoOfTimeSlotDto,
  ProblemDetails,
  ResultOfBookingDto,
  TimeSlotDto,
} from '../models/index';
import {
    BookingDtoFromJSON,
    BookingDtoToJSON,
    CancelBookingDtoFromJSON,
    CancelBookingDtoToJSON,
    ConfirmBookingDtoFromJSON,
    ConfirmBookingDtoToJSON,
    CreateTimeSlotsDtoFromJSON,
    CreateTimeSlotsDtoToJSON,
    GetTimeSlotsDtoFromJSON,
    GetTimeSlotsDtoToJSON,
    PagedListDtoOfTimeSlotDtoFromJSON,
    PagedListDtoOfTimeSlotDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ResultOfBookingDtoFromJSON,
    ResultOfBookingDtoToJSON,
    TimeSlotDtoFromJSON,
    TimeSlotDtoToJSON,
} from '../models/index';

export interface ApiBookingConfirmPostRequest {
    confirmBookingDto: ConfirmBookingDto;
}

export interface ApiBookingPostRequest {
    cancelBookingDto: CancelBookingDto;
}

export interface ApiBookingTimeslotsAllPostRequest {
    getTimeSlotsDto: GetTimeSlotsDto;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBookingTimeslotsAvailablePostRequest {
    getTimeSlotsDto: GetTimeSlotsDto;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBookingTimeslotsPostRequest {
    createTimeSlotsDto: CreateTimeSlotsDto;
}

/**
 * 
 */
export class BookingApi extends runtime.BaseAPI {

    /**
     */
    async apiBookingConfirmPostRaw(requestParameters: ApiBookingConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['confirmBookingDto'] == null) {
            throw new runtime.RequiredError(
                'confirmBookingDto',
                'Required parameter "confirmBookingDto" was null or undefined when calling apiBookingConfirmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmBookingDtoToJSON(requestParameters['confirmBookingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingConfirmPost(requestParameters: ApiBookingConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingPostRaw(requestParameters: ApiBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['cancelBookingDto'] == null) {
            throw new runtime.RequiredError(
                'cancelBookingDto',
                'Required parameter "cancelBookingDto" was null or undefined when calling apiBookingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelBookingDtoToJSON(requestParameters['cancelBookingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingPost(requestParameters: ApiBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsAllPostRaw(requestParameters: ApiBookingTimeslotsAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedListDtoOfTimeSlotDto>> {
        if (requestParameters['getTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'getTimeSlotsDto',
                'Required parameter "getTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsAllPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots/all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTimeSlotsDtoToJSON(requestParameters['getTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedListDtoOfTimeSlotDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingTimeslotsAllPost(requestParameters: ApiBookingTimeslotsAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedListDtoOfTimeSlotDto> {
        const response = await this.apiBookingTimeslotsAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsAvailablePostRaw(requestParameters: ApiBookingTimeslotsAvailablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedListDtoOfTimeSlotDto>> {
        if (requestParameters['getTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'getTimeSlotsDto',
                'Required parameter "getTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsAvailablePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots/available`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTimeSlotsDtoToJSON(requestParameters['getTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedListDtoOfTimeSlotDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingTimeslotsAvailablePost(requestParameters: ApiBookingTimeslotsAvailablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedListDtoOfTimeSlotDto> {
        const response = await this.apiBookingTimeslotsAvailablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsPostRaw(requestParameters: ApiBookingTimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeSlotDto>>> {
        if (requestParameters['createTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'createTimeSlotsDto',
                'Required parameter "createTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTimeSlotsDtoToJSON(requestParameters['createTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeSlotDtoFromJSON));
    }

    /**
     */
    async apiBookingTimeslotsPost(requestParameters: ApiBookingTimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeSlotDto>> {
        const response = await this.apiBookingTimeslotsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
