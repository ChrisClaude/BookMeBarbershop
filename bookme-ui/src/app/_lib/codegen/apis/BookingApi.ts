/* tslint:disable */
/* eslint-disable */
/**
 * BookMeAPI | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookingDto,
  CancelBookingDto,
  ConfirmBookingDto,
  CreateTimeSlotsDto,
  GetAvailableTimeSlotsDto,
  ProblemDetails,
  ResultOfBookingDto,
  ResultOfIEnumerableOfTimeSlotDto,
  TimeSlotDto,
} from '../models/index';
import {
    BookingDtoFromJSON,
    BookingDtoToJSON,
    CancelBookingDtoFromJSON,
    CancelBookingDtoToJSON,
    ConfirmBookingDtoFromJSON,
    ConfirmBookingDtoToJSON,
    CreateTimeSlotsDtoFromJSON,
    CreateTimeSlotsDtoToJSON,
    GetAvailableTimeSlotsDtoFromJSON,
    GetAvailableTimeSlotsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ResultOfBookingDtoFromJSON,
    ResultOfBookingDtoToJSON,
    ResultOfIEnumerableOfTimeSlotDtoFromJSON,
    ResultOfIEnumerableOfTimeSlotDtoToJSON,
    TimeSlotDtoFromJSON,
    TimeSlotDtoToJSON,
} from '../models/index';

export interface ApiBookingConfirmPostRequest {
    confirmBookingDto: ConfirmBookingDto;
}

export interface ApiBookingPostRequest {
    cancelBookingDto: CancelBookingDto;
}

export interface ApiBookingTimeslotsPostRequest {
    createTimeSlotsDto: CreateTimeSlotsDto;
}

export interface TimeslotsPostRequest {
    getAvailableTimeSlotsDto: GetAvailableTimeSlotsDto;
}

/**
 * 
 */
export class BookingApi extends runtime.BaseAPI {

    /**
     */
    async apiBookingConfirmPostRaw(requestParameters: ApiBookingConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['confirmBookingDto'] == null) {
            throw new runtime.RequiredError(
                'confirmBookingDto',
                'Required parameter "confirmBookingDto" was null or undefined when calling apiBookingConfirmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmBookingDtoToJSON(requestParameters['confirmBookingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingConfirmPost(requestParameters: ApiBookingConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingPostRaw(requestParameters: ApiBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['cancelBookingDto'] == null) {
            throw new runtime.RequiredError(
                'cancelBookingDto',
                'Required parameter "cancelBookingDto" was null or undefined when calling apiBookingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelBookingDtoToJSON(requestParameters['cancelBookingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingPost(requestParameters: ApiBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsPostRaw(requestParameters: ApiBookingTimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSlotDto>> {
        if (requestParameters['createTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'createTimeSlotsDto',
                'Required parameter "createTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTimeSlotsDtoToJSON(requestParameters['createTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlotDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingTimeslotsPost(requestParameters: ApiBookingTimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSlotDto> {
        const response = await this.apiBookingTimeslotsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timeslotsPostRaw(requestParameters: TimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResultOfIEnumerableOfTimeSlotDto>> {
        if (requestParameters['getAvailableTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'getAvailableTimeSlotsDto',
                'Required parameter "getAvailableTimeSlotsDto" was null or undefined when calling timeslotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/timeslots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetAvailableTimeSlotsDtoToJSON(requestParameters['getAvailableTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultOfIEnumerableOfTimeSlotDtoFromJSON(jsonValue));
    }

    /**
     */
    async timeslotsPost(requestParameters: TimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResultOfIEnumerableOfTimeSlotDto> {
        const response = await this.timeslotsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
