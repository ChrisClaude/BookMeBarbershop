/* tslint:disable */
/* eslint-disable */
/**
 * BookMeAPI | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookTimeSlotsDto,
  BookingDto,
  CancelBookingDto,
  ConfirmBookingDto,
  CreateTimeSlotsDto,
  GetAvailableDatesDto,
  GetAvailableDatesResponseDto,
  GetAvailableTimeSlotsDto,
  GetBookingsDto,
  GetTimeSlotsDto,
  PagedListDtoOfBookingDto,
  PagedListDtoOfTimeSlotDto,
  ProblemDetails,
  TimeSlotDto,
} from '../models/index';
import {
    BookTimeSlotsDtoFromJSON,
    BookTimeSlotsDtoToJSON,
    BookingDtoFromJSON,
    BookingDtoToJSON,
    CancelBookingDtoFromJSON,
    CancelBookingDtoToJSON,
    ConfirmBookingDtoFromJSON,
    ConfirmBookingDtoToJSON,
    CreateTimeSlotsDtoFromJSON,
    CreateTimeSlotsDtoToJSON,
    GetAvailableDatesDtoFromJSON,
    GetAvailableDatesDtoToJSON,
    GetAvailableDatesResponseDtoFromJSON,
    GetAvailableDatesResponseDtoToJSON,
    GetAvailableTimeSlotsDtoFromJSON,
    GetAvailableTimeSlotsDtoToJSON,
    GetBookingsDtoFromJSON,
    GetBookingsDtoToJSON,
    GetTimeSlotsDtoFromJSON,
    GetTimeSlotsDtoToJSON,
    PagedListDtoOfBookingDtoFromJSON,
    PagedListDtoOfBookingDtoToJSON,
    PagedListDtoOfTimeSlotDtoFromJSON,
    PagedListDtoOfTimeSlotDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TimeSlotDtoFromJSON,
    TimeSlotDtoToJSON,
} from '../models/index';

export interface ApiBookingBookTimeslotPostRequest {
    bookTimeSlotsDto: BookTimeSlotsDto;
}

export interface ApiBookingCancelBookingPostRequest {
    cancelBookingDto: CancelBookingDto;
}

export interface ApiBookingConfirmPostRequest {
    confirmBookingDto: ConfirmBookingDto;
}

export interface ApiBookingGetBookingsPostRequest {
    getBookingsDto: GetBookingsDto;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBookingTimeslotsAllPostRequest {
    getTimeSlotsDto: GetTimeSlotsDto;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBookingTimeslotsAvailableDatesPostRequest {
    getAvailableDatesDto: GetAvailableDatesDto;
}

export interface ApiBookingTimeslotsAvailablePostRequest {
    getAvailableTimeSlotsDto: GetAvailableTimeSlotsDto;
    pageIndex?: number;
    pageSize?: number;
}

export interface ApiBookingTimeslotsPostRequest {
    createTimeSlotsDto: CreateTimeSlotsDto;
}

/**
 * 
 */
export class BookingApi extends runtime.BaseAPI {

    /**
     */
    async apiBookingBookTimeslotPostRaw(requestParameters: ApiBookingBookTimeslotPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['bookTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'bookTimeSlotsDto',
                'Required parameter "bookTimeSlotsDto" was null or undefined when calling apiBookingBookTimeslotPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/book-timeslot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookTimeSlotsDtoToJSON(requestParameters['bookTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingBookTimeslotPost(requestParameters: ApiBookingBookTimeslotPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingBookTimeslotPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingCancelBookingPostRaw(requestParameters: ApiBookingCancelBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['cancelBookingDto'] == null) {
            throw new runtime.RequiredError(
                'cancelBookingDto',
                'Required parameter "cancelBookingDto" was null or undefined when calling apiBookingCancelBookingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/cancel-booking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelBookingDtoToJSON(requestParameters['cancelBookingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingCancelBookingPost(requestParameters: ApiBookingCancelBookingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingCancelBookingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingConfirmPostRaw(requestParameters: ApiBookingConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDto>> {
        if (requestParameters['confirmBookingDto'] == null) {
            throw new runtime.RequiredError(
                'confirmBookingDto',
                'Required parameter "confirmBookingDto" was null or undefined when calling apiBookingConfirmPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmBookingDtoToJSON(requestParameters['confirmBookingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingConfirmPost(requestParameters: ApiBookingConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDto> {
        const response = await this.apiBookingConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingGetBookingsPostRaw(requestParameters: ApiBookingGetBookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedListDtoOfBookingDto>> {
        if (requestParameters['getBookingsDto'] == null) {
            throw new runtime.RequiredError(
                'getBookingsDto',
                'Required parameter "getBookingsDto" was null or undefined when calling apiBookingGetBookingsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/get-bookings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetBookingsDtoToJSON(requestParameters['getBookingsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedListDtoOfBookingDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingGetBookingsPost(requestParameters: ApiBookingGetBookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedListDtoOfBookingDto> {
        const response = await this.apiBookingGetBookingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsAllPostRaw(requestParameters: ApiBookingTimeslotsAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedListDtoOfTimeSlotDto>> {
        if (requestParameters['getTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'getTimeSlotsDto',
                'Required parameter "getTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsAllPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots/all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTimeSlotsDtoToJSON(requestParameters['getTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedListDtoOfTimeSlotDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingTimeslotsAllPost(requestParameters: ApiBookingTimeslotsAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedListDtoOfTimeSlotDto> {
        const response = await this.apiBookingTimeslotsAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsAvailableDatesPostRaw(requestParameters: ApiBookingTimeslotsAvailableDatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableDatesResponseDto>> {
        if (requestParameters['getAvailableDatesDto'] == null) {
            throw new runtime.RequiredError(
                'getAvailableDatesDto',
                'Required parameter "getAvailableDatesDto" was null or undefined when calling apiBookingTimeslotsAvailableDatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots/available/dates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetAvailableDatesDtoToJSON(requestParameters['getAvailableDatesDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAvailableDatesResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingTimeslotsAvailableDatesPost(requestParameters: ApiBookingTimeslotsAvailableDatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableDatesResponseDto> {
        const response = await this.apiBookingTimeslotsAvailableDatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsAvailablePostRaw(requestParameters: ApiBookingTimeslotsAvailablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedListDtoOfTimeSlotDto>> {
        if (requestParameters['getAvailableTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'getAvailableTimeSlotsDto',
                'Required parameter "getAvailableTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsAvailablePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots/available`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetAvailableTimeSlotsDtoToJSON(requestParameters['getAvailableTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedListDtoOfTimeSlotDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingTimeslotsAvailablePost(requestParameters: ApiBookingTimeslotsAvailablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedListDtoOfTimeSlotDto> {
        const response = await this.apiBookingTimeslotsAvailablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingTimeslotsPostRaw(requestParameters: ApiBookingTimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeSlotDto>>> {
        if (requestParameters['createTimeSlotsDto'] == null) {
            throw new runtime.RequiredError(
                'createTimeSlotsDto',
                'Required parameter "createTimeSlotsDto" was null or undefined when calling apiBookingTimeslotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Booking/timeslots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTimeSlotsDtoToJSON(requestParameters['createTimeSlotsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeSlotDtoFromJSON));
    }

    /**
     */
    async apiBookingTimeslotsPost(requestParameters: ApiBookingTimeslotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeSlotDto>> {
        const response = await this.apiBookingTimeslotsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
